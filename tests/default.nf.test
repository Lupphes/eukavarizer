nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"
    tag "pipeline"

    test("eukavarizer: test profile") {

        when {
            params {
                outdir = "$outputDir"
                input = "${projectDir}/tests/samplesheet_minimal.csv"
                reference_genome = "${projectDir}/tests/GCF_000146045.2_R64_genomic.fna.gz"
                taxonomy_id = 4932
                sniffles_flag = true
                minimap2_flag = true
            }
        }

        then {
            assert workflow.success
            assert snapshot(
                path("$outputDir/4932/results/4932.html"),
                path("$outputDir/4932/ref/4932_refseq_results.json"),
                path("$outputDir/pipeline_info/nf_core_eukavarizer_software_mqc_versions.yml")
            ).match()

            // Check for presence of expected output directories and files
            assert path("$outputDir/4932").exists()
            assert path("$outputDir/pipeline_info").exists()

            // Check for timestamped pipeline_info files (can't use wildcards in snapshots)
            def pipelineInfoFiles = path("$outputDir/pipeline_info").list()
            assert pipelineInfoFiles.any { it.fileName.toString().startsWith("execution_report_") && it.fileName.toString().endsWith(".html") }
            assert pipelineInfoFiles.any { it.fileName.toString().startsWith("execution_timeline_") && it.fileName.toString().endsWith(".html") }
            assert pipelineInfoFiles.any { it.fileName.toString().startsWith("pipeline_dag_") && it.fileName.toString().endsWith(".html") }
        }
    }

    test("eukavarizer: all callers enabled") {

        when {
            params {
                outdir = "$outputDir"
                input = "${projectDir}/tests/samplesheet_minimal.csv"
                reference_genome = "${projectDir}/tests/GCF_000146045.2_R64_genomic.fna.gz"
                taxonomy_id = 4932
                minimap2_flag = false
                bwamem2 = false
                delly_flag = true
                manta_flag = true
                gridss_flag = true
                tiddit_flag = true
                sniffles_flag = true
                cutesv_flag = true
                dysgu_flag = true
                svaba_flag = true
            }
        }

        then {
            assert workflow.success
            assert snapshot(
                path("$outputDir/4932/results/4932.html"),
                path("$outputDir/4932/ref/4932_refseq_results.json"),
                path("$outputDir/pipeline_info/nf_core_eukavarizer_software_mqc_versions.yml")
            ).match()

            // Check for presence of expected output directories and files
            assert path("$outputDir/4932").exists()
            assert path("$outputDir/pipeline_info").exists()

            // Check for timestamped pipeline_info files (can't use wildcards in snapshots)
            def pipelineInfoFiles = path("$outputDir/pipeline_info").list()
            assert pipelineInfoFiles.any { it.fileName.toString().startsWith("execution_report_") && it.fileName.toString().endsWith(".html") }
            assert pipelineInfoFiles.any { it.fileName.toString().startsWith("execution_timeline_") && it.fileName.toString().endsWith(".html") }
            assert pipelineInfoFiles.any { it.fileName.toString().startsWith("pipeline_dag_") && it.fileName.toString().endsWith(".html") }
        }
    }
}
