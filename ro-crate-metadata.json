{
    "@context": [
        "https://w3id.org/ro/crate/1.1/context",
        {
            "GithubService": "https://w3id.org/ro/terms/test#GithubService",
            "JenkinsService": "https://w3id.org/ro/terms/test#JenkinsService",
            "PlanemoEngine": "https://w3id.org/ro/terms/test#PlanemoEngine",
            "TestDefinition": "https://w3id.org/ro/terms/test#TestDefinition",
            "TestInstance": "https://w3id.org/ro/terms/test#TestInstance",
            "TestService": "https://w3id.org/ro/terms/test#TestService",
            "TestSuite": "https://w3id.org/ro/terms/test#TestSuite",
            "TravisService": "https://w3id.org/ro/terms/test#TravisService",
            "definition": "https://w3id.org/ro/terms/test#definition",
            "engineVersion": "https://w3id.org/ro/terms/test#engineVersion",
            "instance": "https://w3id.org/ro/terms/test#instance",
            "resource": "https://w3id.org/ro/terms/test#resource",
            "runsOn": "https://w3id.org/ro/terms/test#runsOn"
        }
    ],
    "@graph": [
        {
            "@id": "./",
            "@type": "Dataset",
            "creativeWorkStatus": "InProgress",
            "datePublished": "2025-02-12T13:20:15+00:00",
            "description": "<h1>\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"docs/images/nf-core-eukavarizer_logo_dark.png\">\n    <img alt=\"nf-core/eukavarizer\" src=\"docs/images/nf-core-eukavarizer_logo_light.png\">\n  </picture>\n</h1>\n\n<!-- [![GitHub Actions CI Status](https://github.com/nf-core/eukavarizer/actions/workflows/ci.yml/badge.svg)](https://github.com/nf-core/eukavarizer/actions/workflows/ci.yml) -->\n<!-- [![GitHub Actions Linting Status](https://github.com/nf-core/eukavarizer/actions/workflows/linting.yml/badge.svg)](https://github.com/nf-core/eukavarizer/actions/workflows/linting.yml) -->\n<!-- [![AWS CI](https://img.shields.io/badge/CI%20tests-full%20size-FF9900?labelColor=000000&logo=Amazon%20AWS)](https://nf-co.re/eukavarizer/results) -->\n<!-- [![Cite with Zenodo](http://img.shields.io/badge/DOI-10.5281/zenodo.XXXXXXX-1073c8?labelColor=000000)](https://doi.org/10.5281/zenodo.XXXXXXX) -->\n[![nf-test](https://img.shields.io/badge/unit_tests-nf--test-337ab7.svg)](https://www.nf-test.com)\n\n[![Nextflow](https://img.shields.io/badge/nextflow%20DSL2-%E2%89%A524.04.2-23aa62.svg)](https://www.nextflow.io/)\n[![run with conda](http://img.shields.io/badge/run%20with-conda-3EB049?labelColor=000000&logo=anaconda)](https://docs.conda.io/en/latest/)\n[![run with docker](https://img.shields.io/badge/run%20with-docker-0db7ed?labelColor=000000&logo=docker)](https://www.docker.com/)\n\n[![Get help on Slack](http://img.shields.io/badge/slack-nf--core%20%23eukavarizer-4A154B?labelColor=000000&logo=slack)](https://nfcore.slack.com/channels/eukavarizer)\n[![Follow on Twitter](http://img.shields.io/badge/twitter-%40nf__core-1DA1F2?labelColor=000000&logo=twitter)](https://twitter.com/nf_core)\n[![Follow on Mastodon](https://img.shields.io/badge/mastodon-nf__core-6364ff?labelColor=FFFFFF&logo=mastodon)](https://mstdn.science/@nf_core)\n[![Watch on YouTube](http://img.shields.io/badge/youtube-nf--core-FF0000?labelColor=000000&logo=youtube)](https://www.youtube.com/c/nf-core)\n\n## Introduction\n\n**nf-core/eukavarizer** is a comprehensive, modular, and reproducible bioinformatics pipeline designed for the detection and analysis of **structural variants (SVs)** in **eukaryotic genomes**. The pipeline supports both **short-read and long-read sequencing data**, integrates multiple state-of-the-art SV callers, and provides unified, high-quality variant calls ready for downstream analysis.\n\n### Key Features\n\n- **Multi-caller SV detection**: Integrates 8 SV callers for comprehensive variant discovery\n  - **Short-read optimized**: DELLY, Manta, GRIDSS, SVABA, TIDDIT, DYSGU\n  - **Long-read optimized**: Sniffles, CuteSV, DYSGU\n- **Automated data retrieval**: Downloads reference genomes from RefSeq and sequencing data from ENA using BioDbCore\n- **Complete preprocessing pipeline**: Quality control (FastQC, Fastp, fastplong, BBDuk), adapter trimming, and read filtering\n- **Flexible alignment options**: BWA-MEM (default), BWA-MEM2 (faster), or Minimap2 (long-read optimized)\n- **Intelligent variant merging**: Unifies results using SURVIVOR and BCFtools with SVYNC standardization\n- **Base quality recalibration**: Optional GATK4/GATK4Spark BQSR for improved accuracy\n- **Comprehensive reporting**: MultiQC quality reports and interactive HTML summaries with Varify\n- **Production-ready**: Follows nf-core best practices for reproducibility and scalability\n\n> **Suitable for diverse eukaryotic organisms**: From single-celled yeast to complex mammalian genomes.\n\n## Workflow Overview\n\n1. **Reference genome retrieval** or usage of user-provided genome\n   - Automatic download from RefSeq using BioDbCore\n   - Generates BWA/BWA-MEM2/Minimap2 indices\n   - Creates bgzipped and indexed FASTA files\n\n2. **Read QC and preprocessing**\n   - Quality control with FastQC and MultiQC\n   - Adapter trimming and filtering (Fastp for short reads, fastplong for long reads)\n   - Optional downsampling (Seqtk) and basecalling (Dorado for Nanopore)\n\n3. **Read alignment**\n   - BWA-MEM (default for short reads)\n   - BWA-MEM2 (faster alternative)\n   - Minimap2 (optimized for long reads)\n\n4. **BAM processing**\n   - Multi-lane merging (Samtools)\n   - Duplicate marking (GATK4 MarkDuplicates)\n   - Optional base quality score recalibration (GATK4 BQSR)\n\n5. **SV calling** via one or more tools:\n   - **Short-read**: DELLY, Manta, GRIDSS, SVABA, TIDDIT, DYSGU\n   - **Long-read**: Sniffles, CuteSV, DYSGU\n\n6. **VCF standardization**\n   - SVYNC normalization\n   - StructuralVariantAnnotation for breakpoint refinement\n\n7. **SV merging & filtering**\n   - SURVIVOR for cross-caller merging\n   - BCFtools for concatenation and filtering\n\n8. **Report generation**\n   - MultiQC for aggregated QC metrics\n   - Varify for interactive SV visualization\n   - BCFtools stats for variant statistics\n\n## Usage\n\n> [!NOTE]\n> If you are new to Nextflow and nf-core, please refer to [this page](https://nf-co.re/docs/usage/installation) on how to set-up Nextflow. Make sure to [test your setup](https://nf-co.re/docs/usage/introduction#how-to-run-a-pipeline) with `-profile test` before running the workflow on actual data.\n\n## Quick Start\n\n### Automatic data retrieval (minimal example)\n\n```bash\nnextflow run nf-core/eukavarizer \\\n   -profile docker,short_quick \\\n   --taxonomy_id 4932 \\\n   --outdir results/yeast_test\n```\n\nThis automatically downloads the reference genome for *S. cerevisiae* (taxonomy ID 4932) and retrieves sequencing data from ENA.\n\n### Local input with samplesheet\n\n```bash\nnextflow run nf-core/eukavarizer \\\n   -profile docker,short_full \\\n   --input samplesheet.csv \\\n   --reference_genome genome.fa.gz \\\n   --taxonomy_id 4932 \\\n   --outdir results/\n```\n\n### Long-read analysis\n\n```bash\nnextflow run nf-core/eukavarizer \\\n   -profile docker,long_full \\\n   --input samplesheet.csv \\\n   --reference_genome genome.fa.gz \\\n   --taxonomy_id 4932 \\\n   --minimap2_flag \\\n   --outdir results/\n```\n\n> [!WARNING]\n> Please provide pipeline parameters via the CLI or Nextflow `-params-file` option. Custom config files including those provided by the `-c` Nextflow option can be used to provide any configuration _**except for parameters**_; see [docs](https://nf-co.re/docs/usage/getting_started/configuration#custom-configuration-files).\n\n## Profiles and Parameters\n\nThe pipeline provides several pre-defined profiles to optimise analysis based on input read types and analysis depth. Combine these with a compute environment profile such as `docker`, `conda`, or `mamba`.\n\n### Read Type and Analysis Depth Profiles\n\n| Profile | Read Type | Enabled Callers | Use Case |\n|---------|-----------|----------------|----------|\n| `short_quick` | Short reads | DELLY, Manta | Quick tests, small genomes |\n| `short_medium` | Short reads | DELLY, Manta, GRIDSS, TIDDIT | Balanced analysis |\n| `short_full` | Short reads | All short-read callers | Comprehensive detection |\n| `long_quick` | Long reads | Sniffles | Quick tests |\n| `long_medium` | Long reads | Sniffles, CuteSV | Balanced analysis |\n| `long_full` | Long reads | Sniffles, CuteSV, DYSGU | Comprehensive detection |\n| `mix_quick` | Hybrid | DELLY, Sniffles | Quick hybrid analysis |\n| `mix_medium` | Hybrid | DELLY, Manta, Sniffles, CuteSV | Balanced hybrid |\n| `mix_full` | Hybrid | All compatible callers | Maximum sensitivity |\n\nEach profile adjusts:\n- Enabled SV callers\n- Tool-specific arguments and parameters\n- Filtering thresholds for SURVIVOR and BCFtools\n\n### Compute Environment Profiles\n\n- `docker`: Uses Docker containers (recommended)\n- `conda` / `mamba`: Uses Conda or Mamba for software installation\n- `test`: Runs with minimal test dataset\n\n**Example**: Use `-profile docker,short_full` for a comprehensive analysis on short-read data with Docker.\n\n### Important Parameters\n\n#### Required Parameters\n\n| Parameter | Description |\n| --------- | ----------- |\n| `--taxonomy_id` | NCBI Taxonomy ID for reference retrieval (e.g., 4932 for *S. cerevisiae*) |\n| `--outdir` | Output directory for results |\n\n#### Input Options\n\n| Parameter | Description |\n| --------- | ----------- |\n| `--input` | Path to samplesheet CSV file |\n| `--reference_genome` | Path to reference FASTA file (if not auto-downloading) |\n\n#### Alignment Options\n\n| Parameter | Description | Default |\n| --------- | ----------- | ------- |\n| `--bwamem2` | Use BWA-MEM2 instead of BWA-MEM | `false` |\n| `--minimap2_flag` | Use Minimap2 for long reads | `false` |\n\n#### SV Caller Flags\n\n| Parameter | Description |\n| --------- | ----------- |\n| `--delly_flag` | Enable DELLY caller |\n| `--manta_flag` | Enable Manta caller |\n| `--gridss_flag` | Enable GRIDSS caller |\n| `--svaba_flag` | Enable SVABA caller (requires BWA, not BWA-MEM2) |\n| `--tiddit_flag` | Enable TIDDIT caller |\n| `--dysgu_flag` | Enable DYSGU caller |\n| `--sniffles_flag` | Enable Sniffles caller |\n| `--cutesv_flag` | Enable CuteSV caller |\n\nFor a complete list of parameters, run:\n```bash\nnextflow run nf-core/eukavarizer --help\n```\n\n---\n\n## Pipeline output\n\nThe pipeline produces the following main outputs in the specified `--outdir`:\n\n### Main Output Files\n\n| File/Directory | Description |\n| -------------- | ----------- |\n| `multiqc/multiqc_report.html` | Comprehensive quality control summary across all samples and tools |\n| `varify/report.html` | Interactive HTML report with SV visualizations and summary statistics |\n| `sv_merged/*.vcf.gz` | Final merged and filtered structural variant calls |\n| `sv_calling/*/` | Per-caller VCF files and logs |\n| `alignment/*.bam` | Processed BAM files (duplicate-marked, optionally BQSR) |\n| `pipeline_info/` | Execution reports, timeline, and resource usage |\n\n**Compatibility Notes**:\n- SVABA requires BWA indices (not compatible with `--bwamem2`)\n- DYSGU supports both short and long reads\n- Minimap2 is recommended for long-read data (enable with `--minimap2_flag`)\n\n## Credits\n\n**nf-core/eukavarizer** was originally written by [Ond\u0159ej Sloup (@Lupphes)](https://github.com/Lupphes).\n\nWe thank the following people for their extensive assistance in the development of this pipeline:\n\n<!-- Add contributors here -->\n\n## Contributions and Support\n\nIf you would like to contribute to this pipeline, please see the [contributing guidelines](.github/CONTRIBUTING.md).\n\n## Citations\n\nAn extensive list of references for the tools used by the pipeline can be found in the [`CITATIONS.md`](CITATIONS.md) file.\n\n### Pipeline Citation\n\nIf you use nf-core/eukavarizer for your analysis, please cite:\n\n> **Big Data Analysis: Workflow for Analysing Structural Variants in Sequenced Eukaryotic Genomes**\n>\n> Ond\u0159ej Sloup\n>\n> <!-- DOI: [10.5281/zenodo.XXXXXXX](https://doi.org/10.5281/zenodo.XXXXXXX) -->\n\n### nf-core Framework\n\nYou can cite the `nf-core` publication as follows:\n\n> **The nf-core framework for community-curated bioinformatics pipelines.**\n>\n> Philip Ewels, Alexander Peltzer, Sven Fillinger, Harshil Patel, Johannes Alneberg, Andreas Wilm, Maxime Ulysse Garcia, Paolo Di Tommaso & Sven Nahnsen.\n>\n> _Nat Biotechnol._ 2020 Feb 13. doi: [10.1038/s41587-020-0439-x](https://dx.doi.org/10.1038/s41587-020-0439-x).\n",
            "hasPart": [
                {
                    "@id": "main.nf"
                },
                {
                    "@id": "assets/"
                },
                {
                    "@id": "conf/"
                },
                {
                    "@id": "docs/"
                },
                {
                    "@id": "docs/images/"
                },
                {
                    "@id": "modules/"
                },
                {
                    "@id": "modules/nf-core/"
                },
                {
                    "@id": "workflows/"
                },
                {
                    "@id": "subworkflows/"
                },
                {
                    "@id": "nextflow.config"
                },
                {
                    "@id": "README.md"
                },
                {
                    "@id": "nextflow_schema.json"
                },
                {
                    "@id": "CHANGELOG.md"
                },
                {
                    "@id": "LICENSE"
                },
                {
                    "@id": "CODE_OF_CONDUCT.md"
                },
                {
                    "@id": "CITATIONS.md"
                },
                {
                    "@id": "modules.json"
                },
                {
                    "@id": "docs/usage.md"
                },
                {
                    "@id": "docs/output.md"
                },
                {
                    "@id": ".nf-core.yml"
                },
                {
                    "@id": ".pre-commit-config.yaml"
                },
                {
                    "@id": ".prettierignore"
                }
            ],
            "isBasedOn": "https://github.com/nf-core/eukavarizer",
            "license": "MIT",
            "mainEntity": {
                "@id": "main.nf"
            },
            "mentions": [
                {
                    "@id": "#b7ffbfa0-de73-4fa5-bfd5-1de402958a33"
                }
            ],
            "name": "nf-core/eukavarizer"
        },
        {
            "@id": "ro-crate-metadata.json",
            "@type": "CreativeWork",
            "about": {
                "@id": "./"
            },
            "conformsTo": [
                {
                    "@id": "https://w3id.org/ro/crate/1.1"
                },
                {
                    "@id": "https://w3id.org/workflowhub/workflow-ro-crate/1.0"
                }
            ]
        },
        {
            "@id": "main.nf",
            "@type": [
                "File",
                "SoftwareSourceCode",
                "ComputationalWorkflow"
            ],
            "dateCreated": "",
            "dateModified": "2025-02-12T14:20:15Z",
            "dct:conformsTo": "https://bioschemas.org/profiles/ComputationalWorkflow/1.0-RELEASE/",
            "keywords": [
                "nf-core",
                "nextflow"
            ],
            "license": [
                "MIT"
            ],
            "name": [
                "nf-core/eukavarizer"
            ],
            "programmingLanguage": {
                "@id": "https://w3id.org/workflowhub/workflow-ro-crate#nextflow"
            },
            "sdPublisher": {
                "@id": "https://nf-co.re/"
            },
            "url": [
                "https://github.com/nf-core/eukavarizer",
                "https://nf-co.re/eukavarizer/dev/"
            ],
            "version": [
                "1.0.0dev"
            ]
        },
        {
            "@id": "https://w3id.org/workflowhub/workflow-ro-crate#nextflow",
            "@type": "ComputerLanguage",
            "identifier": {
                "@id": "https://www.nextflow.io/"
            },
            "name": "Nextflow",
            "url": {
                "@id": "https://www.nextflow.io/"
            },
            "version": "!>=24.04.2"
        },
        {
            "@id": "#b7ffbfa0-de73-4fa5-bfd5-1de402958a33",
            "@type": "TestSuite",
            "instance": [
                {
                    "@id": "#36a44ae2-1022-4e1a-ae0c-ec7b8dc3a4ff"
                }
            ],
            "mainEntity": {
                "@id": "main.nf"
            },
            "name": "Test suite for nf-core/eukavarizer"
        },
        {
            "@id": "#36a44ae2-1022-4e1a-ae0c-ec7b8dc3a4ff",
            "@type": "TestInstance",
            "name": "GitHub Actions workflow for testing nf-core/eukavarizer",
            "resource": "repos/nf-core/eukavarizer/actions/workflows/ci.yml",
            "runsOn": {
                "@id": "https://w3id.org/ro/terms/test#GithubService"
            },
            "url": "https://api.github.com"
        },
        {
            "@id": "https://w3id.org/ro/terms/test#GithubService",
            "@type": "TestService",
            "name": "Github Actions",
            "url": {
                "@id": "https://github.com"
            }
        },
        {
            "@id": "assets/",
            "@type": "Dataset",
            "description": "Additional files"
        },
        {
            "@id": "conf/",
            "@type": "Dataset",
            "description": "Configuration files"
        },
        {
            "@id": "docs/",
            "@type": "Dataset",
            "description": "Markdown files for documenting the pipeline"
        },
        {
            "@id": "docs/images/",
            "@type": "Dataset",
            "description": "Images for the documentation files"
        },
        {
            "@id": "modules/",
            "@type": "Dataset",
            "description": "Modules used by the pipeline"
        },
        {
            "@id": "modules/nf-core/",
            "@type": "Dataset",
            "description": "nf-core modules"
        },
        {
            "@id": "workflows/",
            "@type": "Dataset",
            "description": "Main pipeline workflows to be executed in main.nf"
        },
        {
            "@id": "subworkflows/",
            "@type": "Dataset",
            "description": "Smaller subworkflows"
        },
        {
            "@id": "nextflow.config",
            "@type": "File",
            "description": "Main Nextflow configuration file"
        },
        {
            "@id": "README.md",
            "@type": "File",
            "description": "Basic pipeline usage information"
        },
        {
            "@id": "nextflow_schema.json",
            "@type": "File",
            "description": "JSON schema for pipeline parameter specification"
        },
        {
            "@id": "CHANGELOG.md",
            "@type": "File",
            "description": "Information on changes made to the pipeline"
        },
        {
            "@id": "LICENSE",
            "@type": "File",
            "description": "The license - should be MIT"
        },
        {
            "@id": "CODE_OF_CONDUCT.md",
            "@type": "File",
            "description": "The nf-core code of conduct"
        },
        {
            "@id": "CITATIONS.md",
            "@type": "File",
            "description": "Citations needed when using the pipeline"
        },
        {
            "@id": "modules.json",
            "@type": "File",
            "description": "Version information for modules from nf-core/modules"
        },
        {
            "@id": "docs/usage.md",
            "@type": "File",
            "description": "Usage documentation"
        },
        {
            "@id": "docs/output.md",
            "@type": "File",
            "description": "Output documentation"
        },
        {
            "@id": ".nf-core.yml",
            "@type": "File",
            "description": "nf-core configuration file, configuring template features and linting rules"
        },
        {
            "@id": ".pre-commit-config.yaml",
            "@type": "File",
            "description": "Configuration file for pre-commit hooks"
        },
        {
            "@id": ".prettierignore",
            "@type": "File",
            "description": "Ignore file for prettier"
        },
        {
            "@id": "https://nf-co.re/",
            "@type": "Organization",
            "name": "nf-core",
            "url": "https://nf-co.re/"
        }
    ]
}