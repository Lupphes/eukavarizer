nextflow_process {

    name "Test Process BIODBCORE_REFSEQ"
    script "../main.nf"
    process "BIODBCORE_REFSEQ"
    tag "biodbcore"
    tag "biodbcore/refseq"
    tag "modules"
    tag "modules_local"

    test("Download reference genome - yeast - stub") {

        options '-stub'

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = 4932  // Saccharomyces cerevisiae
                input[1] = "$outputDir"
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert process.out.json },
                { assert process.out.reference_genome },
                { assert process.out.versions }
            )
        }
    }

    test("Use existing reference genome - stub") {

        options '-stub'

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = 9606  // Homo sapiens
                input[1] = "$outputDir"
                input[2] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta')
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert process.out.json },
                { assert process.out.versions }
            )
        }
    }

    test("Invalid taxonomy ID - stub") {

        options '-stub'

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = 99999999  // Invalid taxonomy ID
                input[1] = "$outputDir"
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.out.json },
                { assert process.out.versions }
            )
        }
    }
}
