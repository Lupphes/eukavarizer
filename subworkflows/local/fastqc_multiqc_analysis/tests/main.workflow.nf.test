nextflow_workflow {

    name "Test Workflow FASTQC_MULTIQC_ANALYSIS"
    script "../main.nf"
    workflow "FASTQC_MULTIQC_ANALYSIS"
    config "subworkflows/local/fastqc_multiqc_analysis/tests/nextflow.config"
    tag "subworkflows"
    tag "subworkflows_local"
    tag "fastqc_multiqc_analysis"

    /*
     * Test scenario 1: FastQC-only quality assessment
     * This test validates the workflow behavior when only FastQC analysis is enabled.
     * Expected behavior: The workflow should run FastQC to generate quality metrics and HTML reports
     * for paired-end FASTQ files, while skipping MultiQC aggregation. This is useful when users want
     * per-sample quality reports without aggregated summaries across multiple samples.
     */
    test("FastQC only enabled") {

        when {
            params {
                fastqc_flag = true
                multiqc_flag = false
            }
            workflow {
                """
                input[0] = channel.of([
                    [id: 'test', single_end: false],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fastqc_report != null },
                { assert workflow.out.multiqc_report == [null] || workflow.out.multiqc_report == null }
            )
        }
    }

    /*
     * Test scenario 2: MultiQC-only aggregation mode
     * This test validates the workflow when only MultiQC is enabled, skipping FastQC.
     * Expected behavior: The workflow should run MultiQC to aggregate existing quality metrics
     * (from other tools like FASTP, BBDuk, etc.) into a comprehensive HTML report, without
     * running FastQC. This is useful when FastQC has already been run separately or when users
     * only want aggregated summaries from other QC tools.
     */
    test("MultiQC only enabled - stub") {
        options '-stub'

        when {
            params {
                fastqc_flag = false
                multiqc_flag = true
            }
            workflow {
                """
                input[0] = channel.of([
                    [id: 'test', single_end: false],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success }
            )
        }
    }

    /*
     * Test scenario 3: Complete quality assessment with FastQC and MultiQC
     * This test validates the full quality control workflow with both tools enabled.
     * Expected behavior: The workflow should run FastQC to generate per-sample quality metrics,
     * then aggregate all FastQC results along with other QC metrics into a comprehensive MultiQC
     * HTML report. This provides both detailed per-sample reports and aggregated cross-sample
     * summaries for complete quality assessment.
     */
    test("Both enabled - stub") {
        options '-stub'

        when {
            params {
                fastqc_flag = true
                multiqc_flag = true
            }
            workflow {
                """
                input[0] = channel.of([
                    [id: 'test', single_end: false],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fastqc_report != null },
                { assert workflow.out.multiqc_report != null }
            )
        }
    }

    /*
     * Test scenario 4: Quality control disabled - skip all QC
     * This test validates workflow behavior when both FastQC and MultiQC are disabled.
     * Expected behavior: The workflow should skip all quality control steps and produce no
     * FastQC or MultiQC reports. This is useful for re-analysis runs where QC has already been
     * performed, or when users want to minimize compute time for testing or development.
     */
    test("Both disabled - skip") {

        when {
            params {
                fastqc_flag = false
                multiqc_flag = false
            }
            workflow {
                """
                input[0] = channel.of([
                    [id: 'test', single_end: false],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fastqc_report == [null] || workflow.out.fastqc_report == null },
                { assert workflow.out.multiqc_report == [null] || workflow.out.multiqc_report == null }
            )
        }
    }
}
