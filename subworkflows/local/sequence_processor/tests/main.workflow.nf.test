nextflow_workflow {

    name "Test Workflow SEQUENCE_PROCESSOR"
    script "../main.nf"
    workflow "SEQUENCE_PROCESSOR"
    config "subworkflows/local/sequence_processor/tests/nextflow.config"
    tag "subworkflows"
    tag "subworkflows_local"
    tag "sequence_processor"

    /*
     * Test scenario 1: Complete pipeline with all QC tools enabled (FASTQ.GZ paired-end)
     * This test validates the full sequence processing pipeline with all optional tools enabled.
     * Expected behavior: FASTQ.GZ input → fastp filtering → bbduk contamination removal →
     * FastQC quality metrics → BWA-MEM alignment → BAM merging → MultiQC aggregated report.
     * Outputs: filtered FASTQ, aligned BAM + BAI, samtools stats, and MultiQC HTML report.
     */
    test("Complete pipeline - FASTQ.GZ paired end - stub") {
        options '-stub'

        when {
            params {
                fastp_flag = true
                bbmap_bbduk_flag = true
                seqtk_flag = false
                fastqc_flag = true
                multiqc_flag = true
                bwamem2 = false
                long_read_threshold = 1000
            }
            workflow {
                """
                input[0] = channel.of([
                    [id: 'test', data_type: 'fastq_gz', single_end: false, platform: 'illumina', median_bp: 150, sample: 'sample1', patient: 'patient1', lane: 'L001', flowcell: 'FC1', size: 1, num_lanes: 1],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)])
                input[2] = channel.value([[id: 'genome'], []])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fastq_filtered != null },
                { assert workflow.out.bam_bai != null },
                { assert workflow.out.samtools_stats != null },
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    /*
     * Test scenario 2: Complete pipeline with BAM input (minimal QC)
     * This test validates the pipeline starting from BAM files instead of FASTQ.
     * Expected behavior: BAM input → convert to FASTQ (FASTQ_CONVERTOR) → fastp/bbduk filtering →
     * BWA-MEM re-alignment → BAM merging. FastQC and MultiQC are disabled for minimal processing.
     * This scenario is useful for re-processing existing alignments with different parameters.
     */
    test("Complete pipeline - BAM input - stub") {
        options '-stub'

        when {
            params {
                fastp_flag = true
                bbmap_bbduk_flag = true
                seqtk_flag = false
                fastqc_flag = false
                multiqc_flag = false
                bwamem2 = false
                long_read_threshold = 1000
            }
            workflow {
                """
                // BAM input that will be converted back to FASTQ for reprocessing
                input[0] = channel.of([
                    [id: 'test', data_type: 'bam', single_end: false, platform: 'illumina', sample: 'sample1', patient: 'patient1', lane: 'L001', flowcell: 'FC1', size: 1, num_lanes: 1],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ])
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)])
                input[2] = channel.value([[id: 'genome'], []])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fastq_filtered != null },
                { assert workflow.out.bam_bai != null },
                { assert workflow.out.samtools_stats != null }
            )
        }
    }

    /*
     * Test scenario 3: Complete pipeline with CRAM input (no QC/filtering)
     * This test validates the pipeline with CRAM input and all optional processing disabled.
     * Expected behavior: CRAM input → convert to FASTQ (FASTQ_CONVERTOR) → direct BWA-MEM alignment →
     * BAM merging. No filtering or QC steps enabled for minimal processing overhead.
     * This scenario tests the essential conversion-alignment-merge pipeline without extras.
     */
    test("Complete pipeline - CRAM input - stub") {
        options '-stub'

        when {
            params {
                fastp_flag = false
                bbmap_bbduk_flag = false
                seqtk_flag = false
                fastqc_flag = false
                multiqc_flag = false
                bwamem2 = false
                long_read_threshold = 1000
            }
            workflow {
                """
                // CRAM input (compressed alternative to BAM)
                input[0] = channel.of([
                    [id: 'test', data_type: 'cram', single_end: false, platform: 'illumina', sample: 'sample1', patient: 'patient1', lane: 'L001', flowcell: 'FC1', size: 1, num_lanes: 1],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true)
                ])
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)])
                input[2] = channel.value([[id: 'genome'], []])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fastq_filtered != null },
                { assert workflow.out.bam_bai != null },
                { assert workflow.out.samtools_stats != null }
            )
        }
    }

    /*
     * Test scenario 4: Complete pipeline with ONT long reads and minimap2 aligner
     * This test validates the pipeline for Oxford Nanopore long-read sequencing data.
     * Expected behavior: ONT FASTQ.GZ input (median_bp: 5000) → fastp filtering (long-read mode) →
     * minimap2 alignment (optimized for long reads) → BAM merging. bbduk is skipped (not suitable
     * for long reads). This tests the long-read processing path with minimap2 instead of BWA.
     */
    test("Complete pipeline - ONT long reads - stub") {
        options '-stub'

        when {
            params {
                fastp_flag = true
                bbmap_bbduk_flag = false
                seqtk_flag = false
                fastqc_flag = false
                multiqc_flag = false
                bwamem2 = false
                minimap2_flag = true
                long_read_threshold = 1000
            }
            workflow {
                """
                // ONT long-read sample (5000bp median, exceeds long_read_threshold)
                input[0] = channel.of([
                    [id: 'test_ont', data_type: 'fastq_gz', single_end: true, platform: 'ont', median_bp: 5000, sample: 'sample1', patient: 'patient1', lane: 'L001', flowcell: 'FC1', size: 1, num_lanes: 1],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/nanopore/fastq/test.fastq.gz', checkIfExists: true)
                ])
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)])
                input[2] = channel.value([[id: 'genome'], []])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fastq_filtered != null },
                { assert workflow.out.bam_bai != null },
                { assert workflow.out.samtools_stats != null }
            )
        }
    }

    /*
     * Test scenario 5: Complete pipeline with BWAMEM2 aligner (improved BWA version)
     * This test validates the pipeline using BWAMEM2 instead of standard BWA-MEM.
     * Expected behavior: FASTQ.GZ input → fastp/bbduk filtering → BWAMEM2 alignment (improved
     * performance over BWA-MEM for longer reads) → BAM merging. This tests the BWAMEM2 aligner
     * option while keeping the rest of the pipeline the same.
     */
    test("Complete pipeline - BWAMEM2 aligner - stub") {
        options '-stub'

        when {
            params {
                fastp_flag = true
                bbmap_bbduk_flag = true
                seqtk_flag = false
                fastqc_flag = false
                multiqc_flag = false
                bwamem2 = true
                long_read_threshold = 1000
            }
            workflow {
                """
                input[0] = channel.of([
                    [id: 'test', data_type: 'fastq_gz', single_end: false, platform: 'illumina', median_bp: 150, sample: 'sample1', patient: 'patient1', lane: 'L001', flowcell: 'FC1', size: 1, num_lanes: 1],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)])
                input[2] = channel.value([[id: 'genome'], []])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fastq_filtered != null },
                { assert workflow.out.bam_bai != null },
                { assert workflow.out.samtools_stats != null }
            )
        }
    }

    /*
     * Test scenario 6: Complete pipeline with SEQTK subsampling enabled
     * This test validates the optional seqtk subsampling feature for reducing read depth.
     * Expected behavior: FASTQ.GZ input → fastp/bbduk filtering → seqtk subsampling to 10,000 reads →
     * FastQC/MultiQC → BWA-MEM alignment → BAM merging. This is useful for testing/development with
     * smaller datasets or for downsampling high-coverage data.
     */
    test("Complete pipeline - SEQTK subsampling - stub") {
        options '-stub'

        when {
            params {
                fastp_flag = true
                bbmap_bbduk_flag = true
                seqtk_flag = true
                seqtk_size = 10000
                fastqc_flag = true
                multiqc_flag = true
                bwamem2 = false
                long_read_threshold = 1000
            }
            workflow {
                """
                input[0] = channel.of([
                    [id: 'test', data_type: 'fastq_gz', single_end: false, platform: 'illumina', median_bp: 150, sample: 'sample1', patient: 'patient1', lane: 'L001', flowcell: 'FC1', size: 1, num_lanes: 1],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)])
                input[2] = channel.value([[id: 'genome'], []])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fastq_filtered != null },
                { assert workflow.out.bam_bai != null },
                { assert workflow.out.samtools_stats != null }
            )
        }
    }

    /*
     * Test scenario 7: Multiple samples processed in parallel
     * This test validates the pipeline's ability to process multiple independent samples in batch.
     * Expected behavior: Two samples (sample1, sample2) → each processed through fastp filtering →
     * BWA-MEM alignment → BAM merging independently and in parallel. No QC to focus on core
     * processing performance.
     */
    test("Multiple samples - stub") {
        options '-stub'

        when {
            params {
                fastp_flag = true
                bbmap_bbduk_flag = false
                seqtk_flag = false
                fastqc_flag = false
                multiqc_flag = false
                bwamem2 = false
                long_read_threshold = 1000
            }
            workflow {
                """
                // Two different samples from the same patient
                input[0] = channel.of(
                    [
                        [id: 'test1', data_type: 'fastq_gz', single_end: false, platform: 'illumina', median_bp: 150, sample: 'sample1', patient: 'patient1', lane: 'L001', flowcell: 'FC1', size: 1, num_lanes: 1],
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                        ]
                    ],
                    [
                        [id: 'test2', data_type: 'fastq_gz', single_end: false, platform: 'illumina', median_bp: 150, sample: 'sample2', patient: 'patient1', lane: 'L002', flowcell: 'FC1', size: 1, num_lanes: 1],
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                        ]
                    ]
                )
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)])
                input[2] = channel.value([[id: 'genome'], []])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fastq_filtered != null },
                { assert workflow.out.bam_bai != null },
                { assert workflow.out.samtools_stats != null }
            )
        }
    }
}
