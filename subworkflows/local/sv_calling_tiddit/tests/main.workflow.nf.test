nextflow_workflow {

    name "Test Workflow SV_CALLING_TIDDIT"
    script "../main.nf"
    workflow "SV_CALLING_TIDDIT"
    config "subworkflows/local/sv_calling_tiddit/tests/nextflow.config"
    tag "subworkflows"
    tag "subworkflows_local"
    tag "sv_calling_tiddit"

    /*
     * Test scenario 1: Illumina paired-end BAM with BWA alignment
     * This test validates TIDDIT's SV calling using reads aligned with BWA-MEM.
     * Expected behavior: TIDDIT should detect SVs using discordant pairs and split reads,
     * generating VCF output along with compressed VCF (vcfgz), tabix index (tbi), and CSI index (csi) files.
     */
    test("Illumina paired-end BAM input - BWA - stub") {
        options '-stub'

        when {
            params {
                minimap2_flag = false
                long_read_threshold = 1000
            }
            workflow {
                """
                input[0] = channel.of([
                    [id: 'test', single_end: false, platform: 'illumina', median_bp: 150, sample: 'sample1', patient: 'patient1'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.gz', checkIfExists: true)])
                input[2] = channel.value([[id: 'genome'], []])
                input[3] = channel.value([[id: 'genome'], []])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.vcf != null },
                { assert workflow.out.vcfgz != null },
                { assert workflow.out.tbi != null },
                { assert workflow.out.csi != null },
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    /*
     * Test scenario 2: Illumina paired-end BAM with minimap2 alignment
     * This test validates TIDDIT's SV calling using reads aligned with minimap2.
     * Expected behavior: TIDDIT should process minimap2-aligned BAMs correctly,
     * detecting SVs using the same discordant pair and split-read logic.
     */
    test("Illumina paired-end BAM input - minimap2 - stub") {
        options '-stub'

        when {
            params {
                minimap2_flag = true
                long_read_threshold = 1000
            }
            workflow {
                """
                input[0] = channel.of([
                    [id: 'test', single_end: false, platform: 'illumina', median_bp: 150, sample: 'sample1', patient: 'patient1'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.gz', checkIfExists: true)])
                input[2] = channel.value([[id: 'genome'], []])
                input[3] = channel.value([[id: 'genome'], []])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.vcf != null },
                { assert workflow.out.vcfgz != null },
                { assert workflow.out.tbi != null },
            { assert workflow.out.csi != null }
            )
        }
    }

    /*
     * Test scenario 3: Single-end reads are filtered out
     * This test validates TIDDIT's platform filtering - it should skip single-end data.
     * Expected behavior: The workflow should succeed but produce no output, as TIDDIT requires
     * paired-end reads for discordant pair analysis. Single-end reads (single_end: true) should
     * be filtered before calling TIDDIT.
     */
    test("Single-end reads filtered out - stub") {
        options '-stub'

        when {
            params {
                minimap2_flag = false
                long_read_threshold = 1000
            }
            workflow {
                """
                // Single-end sample that should be filtered out (TIDDIT requires paired-end)
                input[0] = channel.of([
                    [id: 'test_single', single_end: true, platform: 'illumina', median_bp: 150, sample: 'sample1', patient: 'patient1'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.gz', checkIfExists: true)])
                input[2] = channel.value([[id: 'genome'], []])
                input[3] = channel.value([[id: 'genome'], []])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success }
            )
        }
    }

    /*
     * Test scenario 4: Long reads are filtered out
     * This test validates TIDDIT's read length filtering - it should skip long-read data.
     * Expected behavior: The workflow should succeed but produce no output, as TIDDIT is optimized
     * for short reads. Reads with median_bp >= long_read_threshold (5000bp >= 1000bp) should be
     * filtered before calling TIDDIT.
     */
    test("Long reads filtered out - stub") {
        options '-stub'

        when {
            params {
                minimap2_flag = false
                long_read_threshold = 1000
            }
            workflow {
                """
                // ONT long-read sample (5000bp) that should be filtered out (threshold is 1000bp)
                input[0] = channel.of([
                    [id: 'test_ont', single_end: false, platform: 'ont', median_bp: 5000, sample: 'sample1', patient: 'patient1'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.gz', checkIfExists: true)])
                input[2] = channel.value([[id: 'genome'], []])
                input[3] = channel.value([[id: 'genome'], []])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success }
            )
        }
    }

    /*
     * Test scenario 5: Multiple samples processed in batch
     * This test validates TIDDIT's ability to process multiple Illumina paired-end samples in parallel.
     * Expected behavior: TIDDIT should successfully call SVs for each sample independently,
     * generating separate VCF outputs for each sample (sample1 and sample2).
     */
    test("Multiple samples - stub") {
        options '-stub'

        when {
            params {
                minimap2_flag = false
                long_read_threshold = 1000
            }
            workflow {
                """
                // Two Illumina paired-end samples from the same patient
                input[0] = channel.of(
                    [
                        [id: 'sample1', single_end: false, platform: 'illumina', median_bp: 150, sample: 'sample1', patient: 'patient1'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                    ],
                    [
                        [id: 'sample2', single_end: false, platform: 'illumina', median_bp: 150, sample: 'sample2', patient: 'patient1'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                    ]
                )
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.gz', checkIfExists: true)])
                input[2] = channel.value([[id: 'genome'], []])
                input[3] = channel.value([[id: 'genome'], []])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.vcf != null },
                { assert workflow.out.vcfgz != null },
                { assert workflow.out.tbi != null },
            { assert workflow.out.csi != null }
            )
        }
    }
}
