nextflow_workflow {

    name "Test Workflow SV_CALLING_DYSGU"
    script "../main.nf"
    workflow "SV_CALLING_DYSGU"
    config "subworkflows/local/sv_calling_dysgu/tests/nextflow.config"
    tag "subworkflows"
    tag "subworkflows_local"
    tag "sv_calling_dysgu"

    test("Illumina BAM input - stub") {
        options '-stub'

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [id: 'test', single_end: false, sample: 'sample1', patient: 'patient1'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                input[1] = Channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)])
                input[2] = Channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.vcf != null },
                { assert workflow.out.vcfgz != null },
                { assert workflow.out.tbi != null },
                { assert workflow.out.csi != null },
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    test("Multiple samples - stub") {
        options '-stub'

        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [id: 'sample1', single_end: false, sample: 'sample1', patient: 'patient1'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                    ],
                    [
                        [id: 'sample2', single_end: false, sample: 'sample2', patient: 'patient1'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                    ]
                )
                input[1] = Channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)])
                input[2] = Channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.vcf != null },
                { assert workflow.out.vcfgz != null },
                { assert workflow.out.tbi != null },
                { assert workflow.out.csi != null }
            )
        }
    }
}
