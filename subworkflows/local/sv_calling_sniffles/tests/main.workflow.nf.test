/*
 * SV_CALLING_SNIFFLES Workflow Tests
 *
 * Sniffles is a structural variant caller specialized for long-read sequencing data.
 * Key features:
 * - Optimized for long-read technologies (Oxford Nanopore and PacBio)
 * - Uses read length signatures and split-read alignments to detect SVs
 * - Handles both ONT and PacBio HiFi sequencing platforms
 * - Particularly effective for detecting large SVs (>50bp)
 * Platform support: ONT and PacBio long-read sequencing
 * Single-end data: Sniffles works with single-end long reads (typical for ONT/PacBio)
 */

nextflow_workflow {

    name "Test Workflow SV_CALLING_SNIFFLES"
    script "../main.nf"
    workflow "SV_CALLING_SNIFFLES"
    config "subworkflows/local/sv_calling_sniffles/tests/nextflow.config"
    tag "subworkflows"
    tag "subworkflows_local"
    tag "sv_calling_sniffles"

    /*
     * Test scenario 1: Oxford Nanopore (ONT) BAM input
     * This test validates Sniffles's SV calling with ONT long-read sequencing data.
     * Expected behavior: Sniffles should process the BAM and detect structural variants
     * using long-read characteristics, generating VCF output along with compressed VCF (vcfgz),
     * tabix index (tbi), and CSI index (csi) files.
     */
    test("ONT BAM input - stub") {
        options '-stub'

        when {
            workflow {
                """
                input[0] = channel.of([
                    [id: 'test', single_end: true, sample: 'sample1', patient: 'patient1'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.gz', checkIfExists: true)])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.vcf != null },
                { assert workflow.out.vcfgz != null },
                { assert workflow.out.tbi != null },
                { assert workflow.out.csi != null },
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    /*
     * Test scenario 2: PacBio HiFi BAM input
     * This test validates Sniffles's SV calling with PacBio HiFi long-read sequencing data.
     * Expected behavior: Sniffles should process the HiFi BAM and leverage the high accuracy
     * of PacBio reads to detect structural variants with high confidence. PacBio HiFi reads
     * provide both long-read advantages and high base accuracy.
     */
    test("PacBio HiFi BAM input - stub") {
        options '-stub'

        when {
            workflow {
                """
                // PacBio HiFi sample (high-fidelity long reads)
                input[0] = channel.of([
                    [id: 'test_pacbio', single_end: true, sample: 'sample1', patient: 'patient1'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/bam/test.sorted.bam.bai', checkIfExists: true)
                ])
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.gz', checkIfExists: true)])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.vcf != null },
                { assert workflow.out.vcfgz != null },
                { assert workflow.out.tbi != null },
                { assert workflow.out.csi != null }
            )
        }
    }

    /*
     * Test scenario 3: Multiple long-read samples processed in batch
     * This test validates Sniffles's ability to process multiple long-read samples in parallel.
     * Expected behavior: Sniffles should successfully call SVs for each sample independently,
     * generating separate VCF outputs for each sample (sample1 and sample2).
     */
    test("Multiple samples - stub") {
        options '-stub'

        when {
            workflow {
                """
                // Two long-read samples from the same patient
                input[0] = channel.of(
                    [
                        [id: 'sample1', single_end: true, sample: 'sample1', patient: 'patient1'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                    ],
                    [
                        [id: 'sample2', single_end: true, sample: 'sample2', patient: 'patient1'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                    ]
                )
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.gz', checkIfExists: true)])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.vcf != null },
                { assert workflow.out.vcfgz != null },
                { assert workflow.out.tbi != null },
                { assert workflow.out.csi != null }
            )
        }
    }
}
