/*
 * SV_CALLING_SVABA Workflow Tests
 *
 * SvABA (Structural Variation and Assembly) is an SV caller that uses genome-wide local assembly
 * for high-resolution detection of structural variants and indels.
 * Key features:
 * - Uses local assembly approach for sensitive SV and indel detection
 * - Optimized for Illumina short-read sequencing data
 * - Optional integration with RepeatMasker for annotating variants in repetitive regions
 * - Filters out BWAMEM2-aligned reads (currently incompatible)
 * - Filters out long-read data (optimized for short reads)
 * Platform support: Illumina paired-end reads (not BWAMEM2)
 * Annotation: Optional repeat masking via svaba_annotate parameter
 */

nextflow_workflow {

    name "Test Workflow SV_CALLING_SVABA"
    script "../main.nf"
    workflow "SV_CALLING_SVABA"
    config "subworkflows/local/sv_calling_svaba/tests/nextflow.config"
    tag "subworkflows"
    tag "subworkflows_local"
    tag "sv_calling_svaba"

    /*
     * Test scenario 1: Illumina BAM input without repeat annotation
     * This test validates SvABA's basic local assembly-based SV calling without annotation.
     * Expected behavior: SvABA should perform local assembly to detect SVs and indels,
     * generating VCF output along with compressed VCF (vcfgz), tabix index (tbi), and CSI index (csi) files.
     */
    test("Illumina BAM input - no annotation - stub") {
        options '-stub'

        when {
            params {
                svaba_annotate = false
                bwamem2 = false
                long_read_threshold = 1000
            }
            workflow {
                """
                input[0] = channel.of([
                    [id: 'test', single_end: false, platform: 'illumina', median_bp: 150, sample: 'sample1', patient: 'patient1'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)])
                input[2] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)])
                input[3] = channel.value([[id: 'genome'], []])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.vcf != null },
                { assert workflow.out.vcfgz != null },
                { assert workflow.out.tbi != null },
                { assert workflow.out.csi != null },
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    /*
     * Test scenario 2: Illumina BAM input with RepeatMasker annotation
     * This test validates SvABA with optional repeat masking annotation enabled.
     * Expected behavior: SvABA should perform local assembly-based SV calling and then annotate
     * the variants with repeat masker data, which helps identify SVs in repetitive genomic regions.
     */
    test("Illumina BAM input - with annotation - stub") {
        options '-stub'

        when {
            params {
                svaba_annotate = true
                bwamem2 = false
                long_read_threshold = 1000
            }
            workflow {
                """
                input[0] = channel.of([
                    [id: 'test', single_end: false, platform: 'illumina', median_bp: 150, sample: 'sample1', patient: 'patient1'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)])
                input[2] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)])
                input[3] = channel.value([[id: 'genome'], []])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.vcf != null },
                { assert workflow.out.vcfgz != null },
                { assert workflow.out.tbi != null },
            { assert workflow.out.csi != null }
            )
        }
    }

    /*
     * Test scenario 3: BWAMEM2-aligned reads are filtered out
     * This test validates SvABA's aligner filtering - it should skip BWAMEM2-aligned data.
     * Expected behavior: The workflow should succeed but produce no output, as SvABA is currently
     * incompatible with BWAMEM2 alignments. Data aligned with BWAMEM2 (bwamem2: true) should be
     * filtered before calling SvABA.
     */
    test("BWAMEM2 filtered out - stub") {
        options '-stub'

        when {
            params {
                svaba_annotate = false
                bwamem2 = true
                long_read_threshold = 1000
            }
            workflow {
                """
                // BWAMEM2-aligned sample that should be filtered out (SvABA incompatible)
                input[0] = channel.of([
                    [id: 'test', single_end: false, platform: 'illumina', median_bp: 150, sample: 'sample1', patient: 'patient1'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)])
                input[2] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)])
                input[3] = channel.value([[id: 'genome'], []])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success }
            )
        }
    }

    /*
     * Test scenario 4: Long reads are filtered out
     * This test validates SvABA's read length filtering - it should skip long-read data.
     * Expected behavior: The workflow should succeed but produce no output, as SvABA is optimized
     * for short reads. Reads with median_bp >= long_read_threshold (5000bp >= 1000bp) should be
     * filtered before calling SvABA.
     */
    test("Long reads filtered out - stub") {
        options '-stub'

        when {
            params {
                svaba_annotate = false
                bwamem2 = false
                long_read_threshold = 1000
            }
            workflow {
                """
                // ONT long-read sample (5000bp) that should be filtered out (threshold is 1000bp)
                input[0] = channel.of([
                    [id: 'test_ont', single_end: false, platform: 'ont', median_bp: 5000, sample: 'sample1', patient: 'patient1'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)])
                input[2] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)])
                input[3] = channel.value([[id: 'genome'], []])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success }
            )
        }
    }

    /*
     * Test scenario 5: Multiple samples processed in batch
     * This test validates SvABA's ability to process multiple Illumina paired-end samples in parallel.
     * Expected behavior: SvABA should successfully perform local assembly-based SV calling for each
     * sample independently, generating separate VCF outputs for each sample (sample1 and sample2).
     */
    test("Multiple samples - stub") {
        options '-stub'

        when {
            params {
                svaba_annotate = false
                bwamem2 = false
                long_read_threshold = 1000
            }
            workflow {
                """
                // Two Illumina paired-end samples from the same patient
                input[0] = channel.of(
                    [
                        [id: 'sample1', single_end: false, platform: 'illumina', median_bp: 150, sample: 'sample1', patient: 'patient1'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                    ],
                    [
                        [id: 'sample2', single_end: false, platform: 'illumina', median_bp: 150, sample: 'sample2', patient: 'patient1'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                    ]
                )
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)])
                input[2] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)])
                input[3] = channel.value([[id: 'genome'], []])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.vcf != null },
                { assert workflow.out.vcfgz != null },
                { assert workflow.out.tbi != null },
            { assert workflow.out.csi != null }
            )
        }
    }
}
