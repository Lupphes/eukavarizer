nextflow_workflow {

    name "Test Workflow SV_CALLING_CUTESV"
    script "../main.nf"
    workflow "SV_CALLING_CUTESV"
    config "subworkflows/local/sv_calling_cutesv/tests/nextflow.config"
    tag "subworkflows"
    tag "subworkflows_local"
    tag "sv_calling_cutesv"

    /*
     * Test scenario 1: Oxford Nanopore (ONT) BAM input
     * This test validates cuteSV's SV calling with ONT long-read sequencing data.
     * Expected behavior: cuteSV should process the BAM using signature-based detection
     * to identify structural variants, generating VCF output along with compressed VCF (vcfgz),
     * tabix index (tbi), and CSI index (csi) files.
     */
    test("ONT BAM input - stub") {
        options '-stub'

        when {
            workflow {
                """
                input[0] = channel.of([
                    [id: 'test', single_end: true, sample: 'sample1', patient: 'patient1'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.gz', checkIfExists: true)])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.vcf != null },
                { assert workflow.out.vcfgz != null },
                { assert workflow.out.tbi != null },
                { assert workflow.out.csi != null },
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    /*
     * Test scenario 2: Multiple long-read samples processed in batch
     * This test validates cuteSV's ability to process multiple long-read samples in parallel.
     * Expected behavior: cuteSV should successfully call SVs for each sample independently,
     * generating separate VCF outputs for each sample (sample1 and sample2).
     */
    test("Multiple samples - stub") {
        options '-stub'

        when {
            workflow {
                """
                // Two long-read samples from the same patient
                input[0] = channel.of(
                    [
                        [id: 'sample1', single_end: true, sample: 'sample1', patient: 'patient1'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                    ],
                    [
                        [id: 'sample2', single_end: true, sample: 'sample2', patient: 'patient1'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                    ]
                )
                input[1] = channel.value([[id: 'genome'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.gz', checkIfExists: true)])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.vcf != null },
                { assert workflow.out.vcfgz != null },
                { assert workflow.out.tbi != null },
                { assert workflow.out.csi != null }
            )
        }
    }
}
