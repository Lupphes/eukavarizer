nextflow_workflow {

    name "Test Workflow BAM_CONVERT_SAMTOOLS"
    script "../main.nf"
    workflow "BAM_CONVERT_SAMTOOLS"
    config "subworkflows/sarek/bam_convert_samtools/tests/nextflow.config"
    tag "subworkflows"
    tag "subworkflows_sarek"
    tag "bam_convert_samtools"

    /*
     * ============================================================================
     * PAIRED-END TESTS
     * ============================================================================
     */

    /*
     * Test scenario 1: BAM to FASTQ conversion (paired-end) - Non-interleaved
     * This test validates BAM file conversion to paired-end FASTQ files
     * Uses test.paired_end.sorted.bam from nf-core test datasets
     * Expected behavior: Extract mapped and unmapped reads, merge unmapped reads, and output paired FASTQ files
     * Data structure: COLLATE_FASTQ outputs [R1, R2], CAT_FASTQ receives [mapped_R1, mapped_R2, unmapped_R1, unmapped_R2]
     */
    test("BAM to FASTQ - paired end - stub") {
        options '-stub'

        when {
            workflow {
                """
                // BAM file with paired-end reads (index will be generated by workflow)
                // Using tuple structure: [meta, bam_file]
                input[0] = channel.of([
                    [id: 'test', single_end: false],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ])
                // Reference genome (required for samtools operations)
                input[1] = channel.value([
                    [id: 'genome'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                // Reference genome index
                input[2] = channel.value([
                    [id: 'genome'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ])
                // Interleaved flag (false = separate R1/R2 files)
                input[3] = false
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.reads != null }
            )
        }
    }

    /*
     * Test scenario 2: BAM to FASTQ conversion with interleaved output
     * This test validates BAM file conversion to interleaved FASTQ format
     * Expected behavior: Extract and merge reads into interleaved FASTQ format (R1/R2 in same file)
     */
    test("BAM to FASTQ - interleaved - stub") {
        options '-stub'

        when {
            workflow {
                """
                input[0] = channel.of([
                    [id: 'test_interleaved', single_end: false],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ])
                input[1] = channel.value([
                    [id: 'genome'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                input[2] = channel.value([
                    [id: 'genome'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ])
                input[3] = true  // interleaved = true
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.reads != null }
            )
        }
    }

    /*
     * Test scenario 3: CRAM to FASTQ conversion
     * This test validates CRAM file conversion to FASTQ files with reference genome
     * CRAM format requires reference genome for decompression
     * Expected behavior: Extract reads from CRAM using reference, output FASTQ files
     */
    test("CRAM to FASTQ - with reference - stub") {
        options '-stub'

        when {
            workflow {
                """
                input[0] = channel.of([
                    [id: 'test_cram', single_end: false],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true)
                ])
                input[1] = channel.value([
                    [id: 'genome'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                input[2] = channel.value([
                    [id: 'genome'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ])
                input[3] = false  // interleaved = false
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.reads != null }
            )
        }
    }

    /*
     * ============================================================================
     * SINGLE-END TESTS
     * ============================================================================
     */

    /*
     * Test scenario 4: BAM to FASTQ conversion (single-end)
     * This test validates BAM file conversion for single-end sequencing data
     * Uses test.single_end.bam from nf-core test datasets
     * Expected behavior: Extract mapped and unmapped reads, merge them into single output
     * Data structure: COLLATE_FASTQ outputs single file, CAT_FASTQ receives [mapped, unmapped] flat list
     */
    test("BAM to FASTQ - single end - stub") {
        options '-stub'

        when {
            workflow {
                """
                input[0] = channel.of([
                    [id: 'test_se', single_end: true],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.bam', checkIfExists: true)
                ])
                input[1] = channel.value([
                    [id: 'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[2] = channel.value([
                    [id: 'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                ])
                input[3] = false  // interleaved = false
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.reads != null }
            )
        }
    }

    /*
     * Test scenario 5: BAM to FASTQ conversion (single-end) - Multiple samples
     * This test validates single-end BAM conversion with multiple samples
     * Tests that the workflow properly handles multiple single-end inputs
     * Expected behavior: Process both samples independently and output separate FASTQ files
     */
    test("BAM to FASTQ - single end multiple samples - stub") {
        options '-stub'

        when {
            workflow {
                """
                input[0] = channel.of(
                    [
                        [id: 'test_se1', single_end: true],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.bam', checkIfExists: true)
                    ],
                    [
                        [id: 'test_se2', single_end: true],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.bam', checkIfExists: true)
                    ]
                )
                input[1] = channel.value([
                    [id: 'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[2] = channel.value([
                    [id: 'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                ])
                input[3] = false  // interleaved = false
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.reads != null }
            )
        }
    }
}
